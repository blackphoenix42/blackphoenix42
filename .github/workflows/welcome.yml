name: Welcome Contributorsname: Welcome Contributorsname: Welcome Contributors

on:

  issues:on:on:

    types: [opened]

  issues:  issues:

permissions:

  contents: read    types: [opened]    types: [opened]

  issues: write

  pull_request_target:  pull_request_target:

jobs:

  welcome:    types: [opened]    types: [opened]

    runs-on: ubuntu-latest

    steps:

      - name: Welcome new contributors

        uses: actions/github-script@v7permissions:permissions:

        with:

          script: |  contents: read  contents: read

            const { owner, repo } = context.repo;

            const author = context.payload.sender.login;  issues: write  issues: write

            

            try {  pull-requests: write  pull-requests: write

              const issues = await github.rest.issues.listForRepo({

                owner: owner,

                repo: repo,

                creator: author,jobs:jobs:

                per_page: 2

              });  welcome:  welcome:

              

              const isFirstTime = issues.data.length <= 1;    runs-on: ubuntu-latest    runs-on: ubuntu-latest

              

              if (isFirstTime) {    steps:    steps:

                const message = '👋 Welcome @' + author + '! Thanks for your first issue! 🎉\n\nPlease check our Contributing Guidelines and Code of Conduct.\n\nThanks for contributing! 🙏';

      - name: Welcome new contributors      - name: Welcome new contributors

                await github.rest.issues.createComment({

                  owner: owner,        uses: actions/github-script@v7        uses: actions/github-script@v7

                  repo: repo,

                  issue_number: context.payload.issue.number,        with:        with:

                  body: message

                });          script: |          script: |

                

                await github.rest.issues.addLabels({            const { owner, repo } = context.repo;            const { owner, repo } = context.repo;

                  owner: owner,

                  repo: repo,            const author = context.payload.sender.login;            const author = context.payload.sender.login;

                  issue_number: context.payload.issue.number,

                  labels: ['first-time-contributor']                        

                });

              }            try {            // Simple check for first-time contributor

            } catch (error) {

              console.log('Error:', error);              // Check if this is the user's first contribution            const isFirstTime = async () => {

            }
              const issues = await github.rest.issues.listForRepo({              try {

                owner: owner,                const issues = await github.rest.issues.listForRepo({

                repo: repo,                  owner, repo, creator: author, per_page: 2

                creator: author,                });

                per_page: 2                return issues.data.length <= 1;

              });              } catch { return false; }

                          };

              const isFirstTime = issues.data.length <= 1;            

                          if (await isFirstTime()) {

              if (isFirstTime && context.eventName === 'issues') {              if (context.eventName === 'issues') {

                const welcomeMessage = `👋 Welcome to the repository, @${author}!                const message = `👋 Welcome @${author}! Thanks for your first issue! 🎉

                                

Thank you for opening your first issue! 🎉Please check our:

- [Contributing Guidelines](.github/CONTRIBUTING.md)

Here are some helpful resources:- [Code of Conduct](.github/CODE_OF_CONDUCT.md)

- 📋 Please check our Contributing Guidelines

- 🤝 Read our Code of Conduct  I'll review this soon. Thanks for contributing! 🙏`;

- 💡 Browse existing issues to see if your topic has been discussed before

- 🆘 If you need help, feel free to ask questions in the comments                await github.rest.issues.createComment({

                  owner, repo,

I'll review your issue soon and get back to you. Thanks for contributing to this project! 🙏`;                  issue_number: context.payload.issue.number,

                  body: message

                await github.rest.issues.createComment({                });

                  owner: owner,                

                  repo: repo,                await github.rest.issues.addLabels({

                  issue_number: context.payload.issue.number,                  owner, repo,

                  body: welcomeMessage                  issue_number: context.payload.issue.number,

                });                  labels: ['first-time-contributor']

                                });

                await github.rest.issues.addLabels({              }

                  owner: owner,            }
                  repo: repo,
                  issue_number: context.payload.issue.number,
                  labels: ['first-time-contributor']
                });
              }
            } catch (error) {
              console.log('Error in welcome workflow:', error);
            }